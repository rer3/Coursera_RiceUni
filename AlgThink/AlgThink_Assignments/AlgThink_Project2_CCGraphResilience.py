"""
Rice University / Coursera: Algorithmic Thinking (Part 1)
Project 2: Connected Components and Graph Resilience
"""
## Import the necessary modules
## Set timeout as needed
import random
#import codeskulptor
#codeskulptor.set_timeout(300)

## See course-provided class for Queue methods
class Queue:
    """
    A simple implementation of a FIFO queue.
    """

    def __init__(self):
        """ 
        Initialize the queue.
        """
        self._items = []

    def __len__(self):
        """
        Return the number of items in the queue.
        """
        return len(self._items)
    
    def __iter__(self):
        """
        Create an iterator for the queue.
        """
        for item in self._items:
            yield item

    def __str__(self):
        """
        Return a string representation of the queue.
        """
        return str(self._items)

    def enqueue(self, item):
        """
        Add item to the queue.
        """        
        self._items.append(item)

    def dequeue(self):
        """
        Remove and return the least recently inserted item.
        """
        return self._items.pop(0)

    def clear(self):
        """
        Remove all items from the queue.
        """
        self._items = []
		
## Import the above like so if not pasting in Queue class
#import poc_queue as queue

## See graphs for Module 2 testing
"""
Graphs for Module 2
"""

# GRAPH0 = {0: set([1]),
          # 1: set([0, 2]),
          # 2: set([1, 3]),
          # 3: set([2])}

# GRAPH1 = {0: set([1, 2, 3, 4]),
          # 1: set([0, 2, 3, 4]),
          # 2: set([0, 1, 3, 4]),
          # 3: set([0, 1, 2, 4]),
          # 4: set([0, 1, 2, 3])}

# GRAPH2 = {1: set([2, 4, 6, 8]),
          # 2: set([1, 3, 5, 7]),
          # 3: set([2, 4, 6, 8]),
          # 4: set([1, 3, 5, 7]),
          # 5: set([2, 4, 6, 8]),
          # 6: set([1, 3, 5, 7]),
          # 7: set([2, 4, 6, 8]),
          # 8: set([1, 3, 5, 7])}

# GRAPH3 = {0: set([]),
          # 1: set([2]),
          # 2: set([1]),
          # 3: set([4]),
          # 4: set([3])}

# GRAPH4 = {0: set([1, 2, 3, 4]),
          # 1: set([0]),
          # 2: set([0]),
          # 3: set([0]),
          # 4: set([0]),
          # 5: set([6, 7]),
          # 6: set([5]),
          # 7: set([5])}

# GRAPH5 = {"dog": set(["cat"]),
          # "cat": set(["dog"]),
          # "monkey": set(["banana"]),
          # "banana": set(["monkey", "ape"]),
          # "ape": set(["banana"])}

# GRAPH6 = {1: set([2, 5]),
          # 2: set([1, 7]),
          # 3: set([4, 6, 9]),
          # 4: set([3, 6, 9]),
          # 5: set([1, 7]),
          # 6: set([3, 4, 9]),
          # 7: set([2, 5]),
          # 9: set([3, 4, 6])}

# GRAPH7 = {0: set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 1: set([0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 2: set([0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 3: set([0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 4: set([0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 5: set([0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 6: set([0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 7: set([0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 8: set([0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 9: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                  # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 10: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 11: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 12: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 13: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 14: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 15: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 16: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 17: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 18: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 19: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 20: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 21: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 22: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 23: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 24: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 25: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 26: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 27: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 28: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 29: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 30: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 31: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 32: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 33: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 34: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 35: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 36: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 37: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 38: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 39: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 40: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 41: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49]), 
          # 42: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49]), 
          # 43: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49]), 
          # 44: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49]), 
          # 45: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49]), 
          # 46: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49]), 
          # 47: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49]), 
          # 48: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49]), 
          # 49: set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
                   # 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48])}

# GRAPH8 = {0: set([]), 
          # 1: set([]), 
          # 2: set([]), 
          # 3: set([]), 
          # 4: set([]), 
          # 5: set([]), 
          # 6: set([]), 
          # 7: set([]), 
          # 8: set([]), 
          # 9: set([]), 
          # 10: set([]), 
          # 11: set([]), 
          # 12: set([]), 
          # 13: set([]), 
          # 14: set([]), 
          # 15: set([]), 
          # 16: set([]), 
          # 17: set([]), 
          # 18: set([]), 
          # 19: set([]), 
          # 20: set([]), 
          # 21: set([]), 
          # 22: set([]), 
          # 23: set([]), 
          # 24: set([]), 
          # 25: set([]), 
          # 26: set([]), 
          # 27: set([]), 
          # 28: set([]), 
          # 29: set([]), 
          # 30: set([]), 
          # 31: set([]), 
          # 32: set([]), 
          # 33: set([]), 
          # 34: set([]), 
          # 35: set([]), 
          # 36: set([]), 
          # 37: set([]), 
          # 38: set([]), 
          # 39: set([]), 
          # 40: set([]), 
          # 41: set([]), 
          # 42: set([]), 
          # 43: set([]), 
          # 44: set([]), 
          # 45: set([]), 
          # 46: set([]), 
          # 47: set([]), 
          # 48: set([]), 
          # 49: set([])}


# GRAPH9 = {0: set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]),
          # 1: set([0, 3, 4, 7, 8, 9, 10]),
          # 2: set([0, 5, 6, 11, 12, 13, 14]),
          # 3: set([0, 1, 7, 8]),
          # 4: set([0, 1, 9, 10]),
          # 5: set([0, 2, 11, 12]),
          # 6: set([0, 2, 13, 14]),
          # 7: set([0, 1, 3]),
          # 8: set([0, 1, 3]),
          # 9: set([0, 1, 4]),
          # 10: set([0, 1, 4]),
          # 11: set([0, 2, 5]),
          # 12: set([0, 2, 5]),
          # 13: set([0, 2, 6]),
          # 14: set([0, 2, 6])}

# GRAPH10 = {0: set([1, 2]),
           # 1: set([0]),
           # 2: set([0, 3, 4]),
           # 3: set([2]),
           # 4: set([2, 5, 6,]),
           # 5: set([4]),
           # 6: set([4, 7, 8]),
           # 7: set([6]),
           # 8: set([6, 9 , 10]),
           # 9: set([8]),
           # 10: set([8, 11, 12]),
           # 11: set([10]),
           # 12: set([10,13, 14]),
           # 13: set([12]),
           # 14: set([12, 15, 16]),
           # 15: set([14]),
           # 16: set([14, 17, 18]),
           # 17: set([16]),
           # 18: set([16, 19, 20]),
           # 19: set([18]),
           # 20: set([18])}
		   
## Project code below
'''
Implement pseudocode for BFS-Visited from H2Q13. 
You can import the poc_queue module or directly implement
a queue using the list operations pop(0) and append(...).

BFS-Visited pseudocode:

Input: Ugraph g = (V,E); source node i
Output: Visited: the set of all nodes visited by the algm
1.  Initialize Q to an empty queue
2.  Visited <- {i}
3.  enqueue(Q, i)
4.  while Q is not empty do
5.      j <- dequeue(Q)
6.      for each neighbor h of j do
7.          if h is not an element of Visited then
8.              Visited <- Visited U {h}
9.              enqueue(Q, h)
10.return Visited
'''

def bfs_visited(ugraph, start_node):
	"""
	Takes undirected graph ugraph and the node start_node and
	returns the set consisting of all nodes that are visited by a BFS
	that starts at start_node.
	"""
	stack = Queue()
	visited = [start_node]
	stack.enqueue(start_node)
	while len(stack) > 0:
		ref_node = stack.dequeue()
		for neighbor in ugraph[ref_node]:
			if neighbor not in visited:
				visited.append(neighbor)
				stack.enqueue(neighbor)
	return set(visited)

'''
Implement the pseudocode for CC-Visited from H2Q13.

CC-Visited pseudocode:

Input: Ugraph g = (V,E)
Output: CC: the set of connected components of graph g
1. Remaining Nodes <- V
2. CC <- null
3. while Remaining Nodes != 0 do
4.     Let i be an arbitrary node in Remaining Nodes
5.     W <- BFS-Visited(g, i)
6.     CC <- {W}
7.     Remaining Nodes <- Remaining Nodes - W
8. return CC
'''

def cc_visited(ugraph):
	"""
	Takes undirected graph ugraph and returns a list of sets where
	each set consists of all nodes in a connected component, and 
	each CC in the graph only has one set.
	"""
	rem_nodes = [key for key in ugraph.keys()]
	conn_comps = []
	while len(rem_nodes) > 0:
		ref_node = random.choice(rem_nodes)
		visited = bfs_visited(ugraph, ref_node)
		conn_comps.append(set(visited))
		for node in visited:
			rem_nodes.remove(node)
	return conn_comps
	
def largest_cc_size(ugraph):
    """
    Takes the undirected graph ugraph and returns the size of the
    largest connected component in ugraph.
    """
    conn_comps = cc_visited(ugraph)
    if len(conn_comps) == 0:
        return 0
    max_len = max([len(comp) for comp in conn_comps])
    return max_len
	
'''
Implement a function that takes an undirected graph and a list
of nodes that will be attacked. You will remove these nodes 
(and their edges) from the graph one at a time and then measure
the "resilience" of the graph at each removal by computing the
size of its largest remaining connected component.
'''

def compute_resilience(ugraph, attack_order):
    """
    Takes the undirected graph ugraph and a list of nodes attack_order
    and iterates through the nodes in attack_order. For each node in the
    list, the given node and its edges are removed from the graph and 
    then the size of the largest resulting CC is computed.
    """
    conn_comps = [largest_cc_size(ugraph)]
    for node in attack_order:
        ugraph.pop(node)
        for edge_set in ugraph.values():
            edge_set.discard(node)
        conn_comps.append(largest_cc_size(ugraph))
    return conn_comps
	
## Testing Queue class
# q = Queue()
# print "q:", q
# print "\n"

# q.enqueue(2)
# print "q:", q
# print "length:", len(q)
# print "\n"

# q.enqueue(3)
# q.enqueue(4)
# q.enqueue(5)
# q.enqueue(5)
# q.enqueue(6)
# q.enqueue(7)
# q.enqueue(7)
# q.enqueue(8)
# print "q:", q
# print "length:", len(q)
# print "\n"

# q.dequeue()
# print "q:", q
# q.dequeue()
# print "q:", q
# print "\n"

# print "pop"
# q._items.pop(0)
# print "q:", q
# print "\n"

# for i in q:
    # print i
# print "q:", q
# print "\n"

# q.enqueue(33)
# print "q:", q
# q.clear()
# print "q:", q